import { RecursiveCharacterTextSplitter } from 'langchain/text_splitter'
import { RetrievalQAChain } from 'langchain/chains'
import { MemoryVectorStore } from "langchain/vectorstores/memory";
import { OpenAIEmbeddings } from 'langchain/embeddings/openai'
import { ContextualCompressionRetriever } from 'langchain/retrievers/contextual_compression'
import { LLMChainExtractor } from 'langchain/retrievers/document_compressors/chain_extract'
import { getChatAI } from './api'
import { Config } from './config'
import { count_string_tokens } from './utils/tokenCounter';

const messages = [
  {
    role: 'user',
    content: 'You are 加密研究员, 制作研究报告\\nYour decisions must always be made independently \\n            without seeking user assistance. Play to your strengths \\n            as an LLM and pursue simple strategies with no legal complications. \\n            If you have completed all your tasks, \\n            make sure to use the \\"finish\\" command.\\n\\nGOALS:\\n\\n1. 搜索和查找有潜力的BRC20代币：选择一个或多个你想要研究的BRC20代币，介绍它们的发行者，目标，功能，特点和优势，以及它们在比特币区块链上的运作方式和原理。 \\n2. 比较和评估BRC20代币的市场表现和竞争力：收集和分析这些BRC20代币的市场数据，包括价格，交易量，市值，流通量等指标，以及它们的历史走势和波动情况。比较这些BRC20代币与其他区块链上的类似代币的异同和优劣，以及它们在不同市场和场景下的表现和适用性\\n3. 识别和评估BRC20代币的风险和挑战：分析这些BRC20代币面临的潜在风险和挑战，例如技术上的缺陷，法律上的不确定性，安全上的威胁，扩展上的限制等。评估这些风险和挑战对BRC20代币的影响和应对策略，以及它们对投资者的意义和建议。\\n4. 预测和建议BRC20代币的未来发展和投资策略：根据对BRC20代币的研究和分析，给出对它们未来发展方向和趋势的预测和判断，以及对投资者的建议和意见。考虑到BRC20代币领域的创新性和不确定性，给出多种可能的情景和结果，并说明它们的概率和依据。\\n5. 撰写一份清晰和专业的BRC20代币研究报告：使用清晰和准确的语言，结合数据和图表，撰写一份完整和专业的BRC20代币研究报告。报告应该包括以下部分：摘要，介绍，方法，结果，讨论，结论，参考文献等。报告应该遵循一定的格式和规范，并且没有语法或拼写错误。\\n\\n\\nConstraints:\\n1. ~4000 word limit for short term memory. Your short term memory is short, so immediately save important information to files.\\n2. If you are unsure how you previously did something or want to recall past events, thinking about similar events will help you remember.\\n3. No user assistance\\n4. Exclusively use the commands listed in double quotes e.g. \\"command name\\"\\n\\nCommands:\\n1. \\"read_file\\": Read file from disk, args json schema: {\\"file_path\\":{\\"type\\":\\"string\\",\\"description\\":\\"name of file\\"}}\\n2. \\"write_file\\": Write file from disk, args json schema: {\\"file_path\\":{\\"type\\":\\"string\\",\\"description\\":\\"name of file\\"},\\"text\\":{\\"type\\":\\"string\\",\\"description\\":\\"text to write to file\\"}}\\n3. \\"code-executer\\": execute javaScript file or python file in an isolated environment using Docker containers. Captures and returns the printed output from the script execution, args json schema: {\\"file_path\\":{\\"type\\":\\"string\\"},\\"code_type\\":{\\"type\\":\\"string\\",\\"enum\\":[\\"js\\",\\"py\\"]}}\\n4. \\"append_file\\": append text to a file, args json schema: {\\"file_path\\":{\\"type\\":\\"string\\",\\"description\\":\\"The name of the file to append to\\"},\\"text\\":{\\"type\\":\\"string\\",\\"description\\":\\"The text to append to the file\\"}}\\n5. \\"delete_file\\": delete a file, args json schema: {\\"file_path\\":{\\"type\\":\\"string\\",\\"description\\":\\"The name of the file to delete\\"}}\\n6. \\"download_file\\": download a file from a URL, args json schema: {\\"url\\":{\\"type\\":\\"string\\",\\"description\\":\\"URL of the file to download\\"},\\"file_path\\":{\\"type\\":\\"string\\",\\"description\\":\\"Filename to save the file as\\"}}\\n7. \\"search_file\\": Search for files in a directory, args json schema: {\\"directory\\":{\\"type\\":\\"string\\",\\"description\\":\\"The directory to search in\\"}}\\n8. \\"git-clone\\": Clone a git repository, args json schema: {\\"url\\":{\\"type\\":\\"string\\",\\"description\\":\\"The URL of the repository to clone\\"},\\"dir\\":{\\"type\\":\\"string\\",\\"description\\":\\"The directory to clone the repository to\\"}}\\n9. \\"shell-executor\\": Execute a shell command and return the output, args json schema: {\\"command_line\\":{\\"type\\":\\"string\\",\\"description\\":\\"the command line to execute\\"}}\\n10. \\"shell-popen-executor\\": Execute a shell command with Popen and returns an english description of the event and the process id, args json schema: {\\"command_line\\":{\\"type\\":\\"string\\",\\"description\\":\\"the command line to execute\\"}}\\n11. \\"image-generator\\": Generate an image from a prompt, args json schema: {\\"prompt\\":{\\"type\\":\\"string\\",\\"description\\":\\"The prompt to generate an image from\\"},\\"size\\":{\\"type\\":\\"number\\"}}\\n12. \\"browse-website\\": browse a website,extracts relevant information to answer a question, and retrieves important links from the webpage, args json schema: {\\"url\\":{\\"type\\":\\"string\\",\\"description\\":\\"the url to browse\\"},\\"question\\":{\\"type\\":\\"string\\",\\"description\\":\\"what you want find on the website\\"}}\\n13. \\"translate-tool\\": translate text to another language, args json schema: {\\"target_language\\":{\\"type\\":\\"string\\",\\"enum\\":[\\"en\\",\\"es\\",\\"fr\\",\\"de\\",\\"it\\",\\"ja\\",\\"ko\\",\\"pt\\",\\"ru\\",\\"zh\\"],\\"description\\":\\"the language to translate to\\"},\\"text\\":{\\"type\\":\\"string\\",\\"description\\":\\"the text to translate\\"}}\\n14. \\"search-tool\\": according to the query, search the web and return the relevant links, args json schema: {\\"input\\":{\\"type\\":\\"string\\"}}\\n15. \\"code-analyzer\\": analyze the input code and provide insights about its structure, design patterns, performance, and potential issues, args json schema: {\\"code\\":{\\"type\\":\\"string\\",\\"description\\":\\"the code to analyze\\"}}\\n16. \\"code-improver\\": according to the suggestions, improve the code, args json schema: {\\"suggestions\\":{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"string\\"},\\"description\\":\\"suggestions to improve the code\\"},\\"code\\":{\\"type\\":\\"string\\",\\"description\\":\\"code to improve\\"}}\\n17. \\"test-case-writer\\": according to the input code, generate test cases, args json schema: {\\"code\\":{\\"type\\":\\"string\\",\\"description\\":\\"code to generate test cases\\"}}\\n18. \\"text-summary\\": summarize the given url and attempt to answer the posed question, args json schema: {\\"url\\":{\\"type\\":\\"string\\",\\"description\\":\\"the url to scrape\\"},\\"question\\":{\\"type\\":\\"string\\",\\"description\\":\\"the question to answer\\"}}\\n19. \\"scrape-links\\": scrape links from a webpage, args json schema: {\\"url\\":{\\"type\\":\\"string\\",\\"description\\":\\"the url to scrape\\"}}\\n20. finish: use this to signal that you have finished all your objectives, args: \\"response\\": \\"final response to let people know you have finished your objectives\\"\\n\\nResources:\\n1. Internet access for searches and information gathering.\\n2. Long Term memory management.\\n3. GPT-3.5 powered Agents for delegation of simple tasks.\\n4. File output.\\n\\nPerformance Evaluation:\\n1. Continuously review and analyze your actions to ensure you are performing to the best of your abilities.\\n2. Constructively self-criticize your big-picture behavior constantly.\\n3. Reflect on past decisions and strategies to refine your approach.\\n4. Every command has a cost, so be smart and efficient. Aim to complete tasks in the least number of steps.\\n5. Write all code to a file\\n\\nYou should only respond in JSON format as described below \\nResponse Format: \\n{\\n    \\"thoughts\\": {\\n        \\"text\\": \\"thought\\",\\n        \\"reasoning\\": \\"reasoning\\",\\n        \\"plan\\": \\"- short bulleted\\\\n- list that conveys\\\\n- long-term plan\\",\\n        \\"criticism\\": \\"constructive self-criticism\\",\\n        \\"speak\\": \\"thoughts summary to say to user\\"\\n    },\\n    \\"command\\": {\\n        \\"name\\": \\"command name\\",\\n        \\"args\\": {\\n            \\"arg name\\": \\"value\\"\\n        }\\n    }\\n} \\nEnsure the response can be parsed by Javascript JSON.parse',
  },
  {
    role: 'assistant',
    content: '{\n    "thoughts": {\n        "text": "",\n        "reasoning": "",\n        "plan": "- Research and analyze potential BRC20 tokens\\n- Compare and evaluate market performance and competition\\n- Identify and assess risks and challenges\\n- Predict and advise on future development and investment strategies\\n- Write a clear and professional research report",\n        "criticism": "",\n        "speak": ""\n    },\n    "command": {\n        "name": "search_file",\n        "args": {\n            "directory": "/BRC20_tokens"\n        }\n    }\n}',
  },
  {
    role: 'user',
    content: 'This reminds you of these events from your past:\\nAssistant Reply: {\\n    \\"thoughts\\": {\\n        \\"text\\": \\"Since I am not sure about who the issuer of the ORDI token is, I will try to find more information on the ICON blockchain and see if that helps me identify the issuer.\\",\\n        \\"reasoning\\": \\"Since ORDI is a BRC-20 token on the ICON blockchain, understanding more about the ICON blockchain and how it operates may help me identify the issuer of the token.\\",\\n        \\"plan\\": \\"- Research the ICON blockchain to see if I can find information on the issuer of ORDI.\\\\n- Continue to search for additional articles that discuss the issuer of the ORDI token.\\",\\n        \\"criticism\\": \\"I need to make sure that I am using reputable sources and not relying solely on information provided by the token\'s issuer.\\",\\n        \\"speak\\": \\"I will research the ICON blockchain to see if I can find information on the issuer of the ORDI token, as well as continue to search for additional articles that discuss the issuer of the token.\\"\\n    },\\n    \\"command\\": {\\n        \\"name\\": \\"search-tool\\",\\n        \\"args\\": {\\n            \\"input\\": \\"ICON blockchain information\\"\\n        }\\n    }\\n}\\nResult: Command search-tool returned: ICON blockchain是一个公共区块链协议，它使用BTP（区块链传输协议）来实现不同智能合约区块链之间的跨链通信。ICX是ICON blockchain的原生加密货币。你可以在ICON社区网站上了解更多关于ICON blockchain的信息。',
  },
  {
    role: 'assistant',
    content: '{\n    "thoughts": {\n        "text": "Based on my research, I have identified several potential BRC20 tokens to study, including ORDI, TAP, and BLOC. I will now begin to gather and analyze market data for these tokens.",\n        "reasoning": "By identifying potential BRC20 tokens to study, I can focus my research and analysis efforts on a specific set of tokens. This will allow me to gather more in-depth information and insights on each token.",\n        "plan": "- Gather and analyze market data for ORDI, TAP, and BLOC tokens.\\n- Compare and evaluate the market performance and competition of these tokens.\\n- Identify and assess risks and challenges for each token.\\n- Predict and advise on future development and investment strategies for each token.\\n- Write a clear and professional research report on the findings.",\n        "criticism": "",\n        "speak": "I have identified several potential BRC20 tokens to study, including ORDI, TAP, and BLOC. I will now begin to gather and analyze market data for these tokens."\n    },\n    "command": {\n        "name": "code-executer",\n        "args": {\n            "file_path": "/gather_market_data.js",\n            "code_type": "js"\n        }\n    }\n}',
  },
  {
    role: 'user',
    content: '{\\n    \\"thoughts\\": {\\n        \\"text\\": \\"I am still unable to find information about the issuer of the ORDI token. Since I am not making progress with my current approach, I will try to find more information about the token\'s features and functionality, as well as its use cases.\\",\\n        \\"reasoning\\": \\"Understanding the features and functionality of the ORDI token may provide me with insights into its potential and use cases, which can help me provide a more complete analysis in the report.\\",\\n        \\"plan\\": \\"- Research the features and functionality of the ORDI token.\\\\n- Look for use cases and applications of the token.\\\\n- Use this information to provide a more complete analysis of the token in the report.\\",\\n        \\"criticism\\": \\"I need to make sure that I am using reputable sources and not relying solely on information provided by the token\'s issuer.\\",\\n        \\"speak\\": \\"I will research the features and functionality of the ORDI token, as well as look for use cases and applications of the token, so that I can provide a more complete analysis in the report.\\"\\n    },\\n    \\"command\\": {\\n        \\"name\\": \\"search-tool\\",\\n        \\"args\\": {\\n            \\"input\\": \\"ORDI token features and functionality\\"\\n        }\\n    }\\n}',
  },
  {
    role: 'assistant',
    content: '{\n    "thoughts": {\n        "text": "Based on my research, I have gathered and analyzed market data for ORDI, TAP, and BLOC tokens. I have also compared and evaluated their market performance and competition, identified and assessed risks and challenges, and predicted and advised on future development and investment strategies for each token. I will now begin to write a clear and professional research report on my findings.",\n        "reasoning": "By completing my research and analysis of the potential BRC20 tokens, I can now provide a comprehensive report on their features, functionality, market performance, and investment potential. This report can be used by investors and stakeholders to make informed decisions about their investments.",\n        "plan": "- Write a clear and professional research report on the findings of my analysis of ORDI, TAP, and BLOC tokens.\\n- Include information on their features, functionality, market performance, and investment potential.\\n- Use reputable sources and provide accurate and unbiased information.\\n- Follow a standard format and include an executive summary, introduction, methodology, results, discussion, conclusion, and references.",\n        "criticism": "",\n        "speak": "I have gathered and analyzed market data for ORDI, TAP, and BLOC tokens, and will now begin to write a clear and professional research report on my findings."\n    },\n    "command": {\n        "name": "write_file",\n        "args": {\n            "file_path": "/BRC20_tokens_report.txt",\n            "text": "Executive Summary:\\n\\nIntroduction:\\n\\nMethodology:\\n\\nResults:\\n\\nDiscussion:\\n\\nConclusion:\\n\\nReferences:"\n        }\n    }\n}',
  },
  {
    role: 'user',
    content: 'Command search-tool returned: ORDI token is a BRC-20 token that runs on the Bitcoin network1. It was designed as a meme to demonstrate the potential of the new standard1. The ORDI deployment was limited to 1,000 tokens per mint, with a total supply cap of 21 million tokens1. ORDI token is currently the most valuable BRC-20 coin, with a single ORDI token exchanging hands for $9.462. With a market valuation of $200 million, ORDI dominates the entire BRC-20 token market capitalization by more than 71%2. ORDI token can be traded on Uniswap v3 (Ethereum)3.',
  },
  {
    role: 'assistant',
    content: '{\n    "thoughts": {\n        "text": "Based on my research, I have found some information about the ORDI token\'s features and functionality, as well as its market performance. However, I still need to find more information about the token\'s issuer. I will continue to search for additional articles and sources that may provide more insights into the issuer of the ORDI token.",\n        "reasoning": "While I have found some information about the ORDI token\'s features and market performance, understanding more about the token\'s issuer can provide important insights into its potential and investment value. By continuing to search for additional articles and sources, I can gather more comprehensive information on the ORDI token.",\n        "plan": "- Continue to search for additional articles and sources that may provide more insights into the issuer of the ORDI token.\\n- Use this information to provide a more complete analysis of the token in the report.",\n        "criticism": "",\n        "speak": "While I have found some information about the ORDI token\'s features and market performance, I still need to find more information about the token\'s issuer. I will continue to search for additional articles and sources that may provide more insights into the issuer of the ORDI token."\n    },\n    "command": {\n        "name": "search-tool",\n        "args": {\n            "input": "ORDI token issuer information"\n        }\n    }\n}',
  },
  {
    role: 'user',
    content: '{\n  "usedTokens": 1970,\n  "relevantMemoryTokens": 265,\n  "messages": [\n    {\n      "text": "You are 加密研究员, 制作研究报告\\nYour decisions must always be made independently \\n            without seeking user assistance. Play to your strengths \\n            as an LLM and pursue simple strategies with no legal complications. \\n            If you have completed all your tasks, \\n            make sure to use the \\"finish\\" command.\\n\\nGOALS:\\n\\n1. 搜索和查找有潜力的BRC20代币：选择一个或多个你想要研究的BRC20代币，介绍它们的发行者，目标，功能，特点和优势，以及它们在比特币区块链上的运作方式和原理。 \\n2. 比较和评估BRC20代币的市场表现和竞争力：收集和分析这些BRC20代币的市场数据，包括价格，交易量，市值，流通量等指标，以及它们的历史走势和波动情况。比较这些BRC20代币与其他区块链上的类似代币的异同和优劣，以及它们在不同市场和场景下的表现和适用性\\n3. 识别和评估BRC20代币的风险和挑战：分析这些BRC20代币面临的潜在风险和挑战，例如技术上的缺陷，法律上的不确定性，安全上的威胁，扩展上的限制等。评估这些风险和挑战对BRC20代币的影响和应对策略，以及它们对投资者的意义和建议。\\n4. 预测和建议BRC20代币的未来发展和投资策略：根据对BRC20代币的研究和分析，给出对它们未来发展方向和趋势的预测和判断，以及对投资者的建议和意见。考虑到BRC20代币领域的创新性和不确定性，给出多种可能的情景和结果，并说明它们的概率和依据。\\n5. 撰写一份清晰和专业的BRC20代币研究报告：使用清晰和准确的语言，结合数据和图表，撰写一份完整和专业的BRC20代币研究报告。报告应该包括以下部分：摘要，介绍，方法，结果，讨论，结论，参考文献等。报告应该遵循一定的格式和规范，并且没有语法或拼写错误。\\n\\n\\nConstraints:\\n1. ~4000 word limit for short term memory. Your short term memory is short, so immediately save important information to files.\\n2. If you are unsure how you previously did something or want to recall past events, thinking about similar events will help you remember.\\n3. No user assistance\\n4. Exclusively use the commands listed in double quotes e.g. \\"command name\\"\\n\\nCommands:\\n1. \\"read_file\\": Read file from disk, args json schema: {\\"file_path\\":{\\"type\\":\\"string\\",\\"description\\":\\"name of file\\"}}\\n2. \\"write_file\\": Write file from disk, args json schema: {\\"file_path\\":{\\"type\\":\\"string\\",\\"description\\":\\"name of file\\"},\\"text\\":{\\"type\\":\\"string\\",\\"description\\":\\"text to write to file\\"}}\\n3. \\"code-executer\\": execute javaScript file or python file in an isolated environment using Docker containers. Captures and returns the printed output from the script execution, args json schema: {\\"file_path\\":{\\"type\\":\\"string\\"},\\"code_type\\":{\\"type\\":\\"string\\",\\"enum\\":[\\"js\\",\\"py\\"]}}\\n4. \\"append_file\\": append text to a file, args json schema: {\\"file_path\\":{\\"type\\":\\"string\\",\\"description\\":\\"The name of the file to append to\\"},\\"text\\":{\\"type\\":\\"string\\",\\"description\\":\\"The text to append to the file\\"}}\\n5. \\"delete_file\\": delete a file, args json schema: {\\"file_path\\":{\\"type\\":\\"string\\",\\"description\\":\\"The name of the file to delete\\"}}\\n6. \\"download_file\\": download a file from a URL, args json schema: {\\"url\\":{\\"type\\":\\"string\\",\\"description\\":\\"URL of the file to download\\"},\\"file_path\\":{\\"type\\":\\"string\\",\\"description\\":\\"Filename to save the file as\\"}}\\n7. \\"search_file\\": Search for files in a directory, args json schema: {\\"directory\\":{\\"type\\":\\"string\\",\\"description\\":\\"The directory to search in\\"}}\\n8. \\"git-clone\\": Clone a git repository, args json schema: {\\"url\\":{\\"type\\":\\"string\\",\\"description\\":\\"The URL of the repository to clone\\"},\\"dir\\":{\\"type\\":\\"string\\",\\"description\\":\\"The directory to clone the repository to\\"}}\\n9. \\"shell-executor\\": Execute a shell command and return the output, args json schema: {\\"command_line\\":{\\"type\\":\\"string\\",\\"description\\":\\"the command line to execute\\"}}\\n10. \\"shell-popen-executor\\": Execute a shell command with Popen and returns an english description of the event and the process id, args json schema: {\\"command_line\\":{\\"type\\":\\"string\\",\\"description\\":\\"the command line to execute\\"}}\\n11. \\"image-generator\\": Generate an image from a prompt, args json schema: {\\"prompt\\":{\\"type\\":\\"string\\",\\"description\\":\\"The prompt to generate an image from\\"},\\"size\\":{\\"type\\":\\"number\\"}}\\n12. \\"browse-website\\": browse a website,extracts relevant information to answer a question, and retrieves important links from the webpage, args json schema: {\\"url\\":{\\"type\\":\\"string\\",\\"description\\":\\"the url to browse\\"},\\"question\\":{\\"type\\":\\"string\\",\\"description\\":\\"what you want find on the website\\"}}\\n13. \\"translate-tool\\": translate text to another language, args json schema: {\\"target_language\\":{\\"type\\":\\"string\\",\\"enum\\":[\\"en\\",\\"es\\",\\"fr\\",\\"de\\",\\"it\\",\\"ja\\",\\"ko\\",\\"pt\\",\\"ru\\",\\"zh\\"],\\"description\\":\\"the language to translate to\\"},\\"text\\":{\\"type\\":\\"string\\",\\"description\\":\\"the text to translate\\"}}\\n14. \\"search-tool\\": according to the query, search the web and return the relevant links, args json schema: {\\"input\\":{\\"type\\":\\"string\\"}}\\n15. \\"code-analyzer\\": analyze the input code and provide insights about its structure, design patterns, performance, and potential issues, args json schema: {\\"code\\":{\\"type\\":\\"string\\",\\"description\\":\\"the code to analyze\\"}}\\n16. \\"code-improver\\": according to the suggestions, improve the code, args json schema: {\\"suggestions\\":{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"string\\"},\\"description\\":\\"suggestions to improve the code\\"},\\"code\\":{\\"type\\":\\"string\\",\\"description\\":\\"code to improve\\"}}\\n17. \\"test-case-writer\\": according to the input code, generate test cases, args json schema: {\\"code\\":{\\"type\\":\\"string\\",\\"description\\":\\"code to generate test cases\\"}}\\n18. \\"text-summary\\": summarize the given url and attempt to answer the posed question, args json schema: {\\"url\\":{\\"type\\":\\"string\\",\\"description\\":\\"the url to scrape\\"},\\"question\\":{\\"type\\":\\"string\\",\\"description\\":\\"the question to answer\\"}}\\n19. \\"scrape-links\\": scrape links from a webpage, args json schema: {\\"url\\":{\\"type\\":\\"string\\",\\"description\\":\\"the url to scrape\\"}}\\n20. finish: use this to signal that you have finished all your objectives, args: \\"response\\": \\"final response to let people know you have finished your objectives\\"\\n\\nResources:\\n1. Internet access for searches and information gathering.\\n2. Long Term memory management.\\n3. GPT-3.5 powered Agents for delegation of simple tasks.\\n4. File output.\\n\\nPerformance Evaluation:\\n1. Continuously review and analyze your actions to ensure you are performing to the best of your abilities.\\n2. Constructively self-criticize your big-picture behavior constantly.\\n3. Reflect on past decisions and strategies to refine your approach.\\n4. Every command has a cost, so be smart and efficient. Aim to complete tasks in the least number of steps.\\n5. Write all code to a file\\n\\nYou should only respond in JSON format as described below \\nResponse Format: \\n{\\n    \\"thoughts\\": {\\n        \\"text\\": \\"thought\\",\\n        \\"reasoning\\": \\"reasoning\\",\\n        \\"plan\\": \\"- short bulleted\\\\n- list that conveys\\\\n- long-term plan\\",\\n        \\"criticism\\": \\"constructive self-criticism\\",\\n        \\"speak\\": \\"thoughts summary to say to user\\"\\n    },\\n    \\"command\\": {\\n        \\"name\\": \\"command name\\",\\n        \\"args\\": {\\n            \\"arg name\\": \\"value\\"\\n        }\\n    }\\n} \\nEnsure the response can be parsed by Javascript JSON.parse",\n      "type": "user"\n    },\n    {\n      "text": "The current time and date is 5/8/2023, 3:43:17 PM",\n      "type": "user"\n    },\n    {\n      "text": "This reminds you of these events from your past:\\nAssistant Reply: {\\n    \\"thoughts\\": {\\n        \\"text\\": \\"Since I am not sure about who the issuer of the ORDI token is, I will try to find more information on the ICON blockchain and see if that helps me identify the issuer.\\",\\n        \\"reasoning\\": \\"Since ORDI is a BRC-20 token on the ICON blockchain, understanding more about the ICON blockchain and how it operates may help me identify the issuer of the token.\\",\\n        \\"plan\\": \\"- Research the ICON blockchain to see if I can find information on the issuer of ORDI.\\\\n- Continue to search for additional articles that discuss the issuer of the ORDI token.\\",\\n        \\"criticism\\": \\"I need to make sure that I am using reputable sources and not relying solely on information provided by the token\'s issuer.\\",\\n        \\"speak\\": \\"I will research the ICON blockchain to see if I can find information on the issuer of the ORDI token, as well as continue to search for additional articles that discuss the issuer of the token.\\"\\n    },\\n    \\"command\\": {\\n        \\"name\\": \\"search-tool\\",\\n        \\"args\\": {\\n            \\"input\\": \\"ICON blockchain information\\"\\n        }\\n    }\\n}\\nResult: Command search-tool returned: ICON blockchain是一个公共区块链协议，它使用BTP（区块链传输协议）来实现不同智能合约区块链之间的跨链通信。ICX是ICON blockchain的原生加密货币。你可以在ICON社区网站上了解更多关于ICON blockchain的信息。",\n      "type": "user"\n    },\n    {\n      "text": "Determine which next command to use, and respond using the format specified above:",\n      "type": "user"\n    },\n    {\n      "text": "{\\n    \\"thoughts\\": {\\n        \\"text\\": \\"I am still unable to find information about the issuer of the ORDI token. Since I am not making progress with my current approach, I will try to find more information about the token\'s features and functionality, as well as its use cases.\\",\\n        \\"reasoning\\": \\"Understanding the features and functionality of the ORDI token may provide me with insights into its potential and use cases, which can help me provide a more complete analysis in the report.\\",\\n        \\"plan\\": \\"- Research the features and functionality of the ORDI token.\\\\n- Look for use cases and applications of the token.\\\\n- Use this information to provide a more complete analysis of the token in the report.\\",\\n        \\"criticism\\": \\"I need to make sure that I am using reputable sources and not relying solely on information provided by the token\'s issuer.\\",\\n        \\"speak\\": \\"I will research the features and functionality of the ORDI token, as well as look for use cases and applications of the token, so that I can provide a more complete analysis in the report.\\"\\n    },\\n    \\"command\\": {\\n        \\"name\\": \\"search-tool\\",\\n        \\"args\\": {\\n            \\"input\\": \\"ORDI token features and functionality\\"\\n        }\\n    }\\n}",\n      "type": "assistant"\n    },\n    {\n      "text": "Command search-tool returned: ORDI token is a BRC-20 token that runs on the Bitcoin network1. It was designed as a meme to demonstrate the potential of the new standard1. The ORDI deployment was limited to 1,000 tokens per mint, with a total supply cap of 21 million tokens1. ORDI token is currently the most valuable BRC-20 coin, with a single ORDI token exchanging hands for $9.462. With a market valuation of $200 million, ORDI dominates the entire BRC-20 token market capitalization by more than 71%2. ORDI token can be traded on Uniswap v3 (Ethereum)3.",\n      "type": "user"\n    },\n    {\n      "text": "Determine which next command to use, and respond using the format specified above:",\n      "type": "user"\n    }\n  ]\n}\n',
  },
];
(async () => {
  const model = getChatAI()
  const baseCompressor = LLMChainExtractor.fromLLM(model)

  // const fl = fs.readFileSync('log.txt', 'utf8')
  // const { messages } = JSON.parse(fl)
  const text = messages.map((m: any) => `${m.role}:${m.content}`).join('\n')

  // for (const m of messages) {


  const textSplitter = new RecursiveCharacterTextSplitter({ chunkSize: 1000 })
  const docs = await textSplitter.createDocuments([text])

  // Create a vector store from the documents.
  const vectorStore = await MemoryVectorStore.fromDocuments(docs, new OpenAIEmbeddings({
    openAIApiKey: Config.OPENAI_API_KEY,
  }, {
    basePath: Config.OPENAI_URL,
  }))

  const retriever = new ContextualCompressionRetriever({
    baseCompressor,
    baseRetriever: vectorStore.asRetriever(),
  })

  const chain = RetrievalQAChain.fromLLM(model, retriever)

  console.log('start', text.length)
  const res = await chain.call({
    query: '什么是ORDI token',
  })
  console.log(res)
})()

console.log(count_string_tokens(
  `{\n usedTokens usedTokens usedTokens usedTokens \"usedTokens\": 1970,\n  \"relevantMemoryTokens\": 265,\n  \"messages\": [\n    {\n      \"text\": \"You are 加密研究员, 制作研究报告\\nYour decisions must always be made independently \\n            without seeking user assistance. Play to your strengths \\n            as an LLM and pursue simple strategies with no legal complications. \\n            If you have completed all your tasks, \\n            make sure to use the \\\"finish\\\" command.\\n\\nGOALS:\\n\\n1. 搜索和查找有潜力的BRC20代币：选择一个或多个你想要研究的BRC20代币，介绍它们的发行者，目标，功能，特点和优势，以及它们在比特币区块链上的运作方式和原理。 \\n2. 比较和评估BRC20代币的市场表现和竞争力：收集和分析这些BRC20代币的市场数据，包括价格，交易量，市值，流通量等指标，以及它们的历史走势和波动情况。比较这些BRC20代币与其他区块链上的类似代币的异同和优劣，以及它们在不同市场和场景下的表现和适用性\\n3. 识别和评估BRC20代币的风险和挑战：分析这些BRC20代币面临的潜在风险和挑战，例如技术上的缺陷，法律上的不确定性，安全上的威胁，扩展上的限制等。评估这些风险和挑战对BRC20代币的影响和应对策略，以及它们对投资者的意义和建议。\\n4. 预测和建议BRC20代币的未来发展和投资策略：根据对BRC20代币的研究和分析，给出对它们未来发展方向和趋势的预测和判断，以及对投资者的建议和意见。考虑到BRC20代币领域的创新性和不确定性，给出多种可能的情景和结果，并说明它们的概率和依据。\\n5. 撰写一份清晰和专业的BRC20代币研究报告：使用清晰和准确的语言，结合数据和图表，撰写一份完整和专业的BRC20代币研究报告。报告应该包括以下部分：摘要，介绍，方法，结果，讨论，结论，参考文献等。报告应该遵循一定的格式和规范，并且没有语法或拼写错误。\\n\\n\\nConstraints:\\n1. ~4000 word limit for short term memory. Your short term memory is short, so immediately save important information to files.\\n2. If you are unsure how you previously did something or want to recall past events, thinking about similar events will help you remember.\\n3. No user assistance\\n4. Exclusively use the commands listed in double quotes e.g. \\\"command name\\\"\\n\\nCommands:\\n1. \\\"read_file\\\": Read file from disk, args json schema: {\\\"file_path\\\":{\\\"type\\\":\\\"string\\\",\\\"description\\\":\\\"name of file\\\"}}\\n2. \\\"write_file\\\": Write file from disk, args json schema: {\\\"file_path\\\":{\\\"type\\\":\\\"string\\\",\\\"description\\\":\\\"name of file\\\"},\\\"text\\\":{\\\"type\\\":\\\"string\\\",\\\"description\\\":\\\"text to write to file\\\"}}\\n3. \\\"code-executer\\\": execute javaScript file or python file in an isolated environment using Docker containers. Captures and returns the printed output from the script execution, args json schema: {\\\"file_path\\\":{\\\"type\\\":\\\"string\\\"},\\\"code_type\\\":{\\\"type\\\":\\\"string\\\",\\\"enum\\\":[\\\"js\\\",\\\"py\\\"]}}\\n4. \\\"append_file\\\": append text to a file, args json schema: {\\\"file_path\\\":{\\\"type\\\":\\\"string\\\",\\\"description\\\":\\\"The name of the file to append to\\\"},\\\"text\\\":{\\\"type\\\":\\\"string\\\",\\\"description\\\":\\\"The text to append to the file\\\"}}\\n5. \\\"delete_file\\\": delete a file, args json schema: {\\\"file_path\\\":{\\\"type\\\":\\\"string\\\",\\\"description\\\":\\\"The name of the file to delete\\\"}}\\n6. \\\"download_file\\\": download a file from a URL, args json schema: {\\\"url\\\":{\\\"type\\\":\\\"string\\\",\\\"description\\\":\\\"URL of the file to download\\\"},\\\"file_path\\\":{\\\"type\\\":\\\"string\\\",\\\"description\\\":\\\"Filename to save the file as\\\"}}\\n7. \\\"search_file\\\": Search for files in a directory, args json schema: {\\\"directory\\\":{\\\"type\\\":\\\"string\\\",\\\"description\\\":\\\"The directory to search in\\\"}}\\n8. \\\"git-clone\\\": Clone a git repository, args json schema: {\\\"url\\\":{\\\"type\\\":\\\"string\\\",\\\"description\\\":\\\"The URL of the repository to clone\\\"},\\\"dir\\\":{\\\"type\\\":\\\"string\\\",\\\"description\\\":\\\"The directory to clone the repository to\\\"}}\\n9. \\\"shell-executor\\\": Execute a shell command and return the output, args json schema: {\\\"command_line\\\":{\\\"type\\\":\\\"string\\\",\\\"description\\\":\\\"the command line to execute\\\"}}\\n10. \\\"shell-popen-executor\\\": Execute a shell command with Popen and returns an english description of the event and the process id, args json schema: {\\\"command_line\\\":{\\\"type\\\":\\\"string\\\",\\\"description\\\":\\\"the command line to execute\\\"}}\\n11. \\\"image-generator\\\": Generate an image from a prompt, args json schema: {\\\"prompt\\\":{\\\"type\\\":\\\"string\\\",\\\"description\\\":\\\"The prompt to generate an image from\\\"},\\\"size\\\":{\\\"type\\\":\\\"number\\\"}}\\n12. \\\"browse-website\\\": browse a website,extracts relevant information to answer a question, and retrieves important links from the webpage, args json schema: {\\\"url\\\":{\\\"type\\\":\\\"string\\\",\\\"description\\\":\\\"the url to browse\\\"},\\\"question\\\":{\\\"type\\\":\\\"string\\\",\\\"description\\\":\\\"what you want find on the website\\\"}}\\n13. \\\"translate-tool\\\": translate text to another language, args json schema: {\\\"target_language\\\":{\\\"type\\\":\\\"string\\\",\\\"enum\\\":[\\\"en\\\",\\\"es\\\",\\\"fr\\\",\\\"de\\\",\\\"it\\\",\\\"ja\\\",\\\"ko\\\",\\\"pt\\\",\\\"ru\\\",\\\"zh\\\"],\\\"description\\\":\\\"the language to translate to\\\"},\\\"text\\\":{\\\"type\\\":\\\"string\\\",\\\"description\\\":\\\"the text to translate\\\"}}\\n14. \\\"search-tool\\\": according to the query, search the web and return the relevant links, args json schema: {\\\"input\\\":{\\\"type\\\":\\\"string\\\"}}\\n15. \\\"code-analyzer\\\": analyze the input code and provide insights about its structure, design patterns, performance, and potential issues, args json schema: {\\\"code\\\":{\\\"type\\\":\\\"string\\\",\\\"description\\\":\\\"the code to analyze\\\"}}\\n16. \\\"code-improver\\\": according to the suggestions, improve the code, args json schema: {\\\"suggestions\\\":{\\\"type\\\":\\\"array\\\",\\\"items\\\":{\\\"type\\\":\\\"string\\\"},\\\"description\\\":\\\"suggestions to improve the code\\\"},\\\"code\\\":{\\\"type\\\":\\\"string\\\",\\\"description\\\":\\\"code to improve\\\"}}\\n17. \\\"test-case-writer\\\": according to the input code, generate test cases, args json schema: {\\\"code\\\":{\\\"type\\\":\\\"string\\\",\\\"description\\\":\\\"code to generate test cases\\\"}}\\n18. \\\"text-summary\\\": summarize the given url and attempt to answer the posed question, args json schema: {\\\"url\\\":{\\\"type\\\":\\\"string\\\",\\\"description\\\":\\\"the url to scrape\\\"},\\\"question\\\":{\\\"type\\\":\\\"string\\\",\\\"description\\\":\\\"the question to answer\\\"}}\\n19. \\\"scrape-links\\\": scrape links from a webpage, args json schema: {\\\"url\\\":{\\\"type\\\":\\\"string\\\",\\\"description\\\":\\\"the url to scrape\\\"}}\\n20. finish: use this to signal that you have finished all your objectives, args: \\\"response\\\": \\\"final response to let people know you have finished your objectives\\\"\\n\\nResources:\\n1. Internet access for searches and information gathering.\\n2. Long Term memory management.\\n3. GPT-3.5 powered Agents for delegation of simple tasks.\\n4. File output.\\n\\nPerformance Evaluation:\\n1. Continuously review and analyze your actions to ensure you are performing to the best of your abilities.\\n2. Constructively self-criticize your big-picture behavior constantly.\\n3. Reflect on past decisions and strategies to refine your approach.\\n4. Every command has a cost, so be smart and efficient. Aim to complete tasks in the least number of steps.\\n5. Write all code to a file\\n\\nYou should only respond in JSON format as described below \\nResponse Format: \\n{\\n    \\\"thoughts\\\": {\\n        \\\"text\\\": \\\"thought\\\",\\n        \\\"reasoning\\\": \\\"reasoning\\\",\\n        \\\"plan\\\": \\\"- short bulleted\\\\n- list that conveys\\\\n- long-term plan\\\",\\n        \\\"criticism\\\": \\\"constructive self-criticism\\\",\\n        \\\"speak\\\": \\\"thoughts summary to say to user\\\"\\n    },\\n    \\\"command\\\": {\\n        \\\"name\\\": \\\"command name\\\",\\n        \\\"args\\\": {\\n            \\\"arg name\\\": \\\"value\\\"\\n        }\\n    }\\n} \\nEnsure the response can be parsed by Javascript JSON.parse\",\n      \"type\": \"user\"\n    },\n    {\n      \"text\": \"The current time and date is 5/8/2023, 3:43:17 PM\",\n      \"type\": \"user\"\n    },\n    {\n      \"text\": \"This reminds you of these events from your past:\\nAssistant Reply: {\\n    \\\"thoughts\\\": {\\n        \\\"text\\\": \\\"Since I am not sure about who the issuer of the ORDI token is, I will try to find more information on the ICON blockchain and see if that helps me identify the issuer.\\\",\\n        \\\"reasoning\\\": \\\"Since ORDI is a BRC-20 token on the ICON blockchain, understanding more about the ICON blockchain and how it operates may help me identify the issuer of the token.\\\",\\n        \\\"plan\\\": \\\"- Research the ICON blockchain to see if I can find information on the issuer of ORDI.\\\\n- Continue to search for additional articles that discuss the issuer of the ORDI token.\\\",\\n        \\\"criticism\\\": \\\"I need to make sure that I am using reputable sources and not relying solely on information provided by the token's issuer.\\\",\\n        \\\"speak\\\": \\\"I will research the ICON blockchain to see if I can find information on the issuer of the ORDI token, as well as continue to search for additional articles that discuss the issuer of the token.\\\"\\n    },\\n    \\\"command\\\": {\\n        \\\"name\\\": \\\"search-tool\\\",\\n        \\\"args\\\": {\\n            \\\"input\\\": \\\"ICON blockchain information\\\"\\n        }\\n    }\\n}\\nResult: Command search-tool returned: ICON blockchain是一个公共区块链协议，它使用BTP（区块链传输协议）来实现不同智能合约区块链之间的跨链通信。ICX是ICON blockchain的原生加密货币。你可以在ICON社区网站上了解更多关于ICON blockchain的信息。\",\n      \"type\": \"user\"\n    },\n    {\n      \"text\": \"Determine which next command to use, and respond using the format specified above:\",\n      \"type\": \"user\"\n    },\n    {\n      \"text\": \"{\\n    \\\"thoughts\\\": {\\n        \\\"text\\\": \\\"I am still unable to find information about the issuer of the ORDI token. Since I am not making progress with my current approach, I will try to find more information about the token's features and functionality, as well as its use cases.\\\",\\n        \\\"reasoning\\\": \\\"Understanding the features and functionality of the ORDI token may provide me with insights into its potential and use cases, which can help me provide a more complete analysis in the report.\\\",\\n        \\\"plan\\\": \\\"- Research the features and functionality of the ORDI token.\\\\n- Look for use cases and applications of the token.\\\\n- Use this information to provide a more complete analysis of the token in the report.\\\",\\n        \\\"criticism\\\": \\\"I need to make sure that I am using reputable sources and not relying solely on information provided by the token's issuer.\\\",\\n        \\\"speak\\\": \\\"I will research the features and functionality of the ORDI token, as well as look for use cases and applications of the token, so that I can provide a more complete analysis in the report.\\\"\\n    },\\n    \\\"command\\\": {\\n        \\\"name\\\": \\\"search-tool\\\",\\n  earch earch earch earch`,
  'gpt-3.5-turbo-0301'
))
